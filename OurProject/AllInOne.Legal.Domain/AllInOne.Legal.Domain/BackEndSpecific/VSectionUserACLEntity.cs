namespace AllInOne.Legal.Domain.BackEndSpecific
{
    using System;
    using System.Collections.Generic;

    using AllInOne.Legal.Domain.Interfaces;

    /// <summary>
    ///	Generated by MyGeneration using the NHibernate Object Mapping template
    /// </summary>
    [Serializable]
    public class VSectionUserACLEntity : IBackEndSpecificEntity
    {
        #region Properties

        /// <summary>
        /// Gets or sets the casetypecode field.
        /// </summary>
        public System.String casetypecode
        {
            get;
             			set;
        }

        /// <summary>
        /// Gets or sets the forumid field.
        /// </summary>
        public System.String forumid
        {
            get;
             			set;
        }

        /// <summary>
        /// Gets or sets the SectionCode field.
        /// </summary>
        public System.String SectionCode
        {
            get;
             			set;
        }

        /// <summary>
        /// Gets or sets the userid field.
        /// </summary>
        public System.String userid
        {
            get;
             			set;
        }

        /// <summary>
		/// Gets or sets the SubCaseTypeCode field.
		/// </summary>
        public System.String SubCaseTypeCode
        {
            get;
            set;
        }

        #endregion Properties

        #region Methods

        /// <summary>Determines whether the specified object is equal to this instance.</summary>
        /// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            VSectionUserACLEntity toCompareWith = obj as VSectionUserACLEntity;
            return toCompareWith == null ? false : ((this.userid == toCompareWith.userid && this.casetypecode == toCompareWith.casetypecode && this.forumid == toCompareWith.forumid && this.SectionCode == toCompareWith.SectionCode && this.SubCaseTypeCode == toCompareWith.SubCaseTypeCode));
        }

        /// <summary>Returns a hash code for this instance.</summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        public override int GetHashCode()
        {
            int toReturn = base.GetHashCode();
            if (string.IsNullOrEmpty(SubCaseTypeCode))
                SubCaseTypeCode = string.Empty;
            toReturn ^= String.Concat(userid, casetypecode, forumid, SectionCode, SubCaseTypeCode).GetHashCode();
            return toReturn;
        }

        public override string ToString()
        {
            return 		"SectionCode=" + SectionCode + "--" +
            "userid=" + userid + "--" +
            "forumid=" + forumid + "--" +
            "casetypecode=" + casetypecode + "--" +
            "SubCaseTypeCode=" + SubCaseTypeCode + "--" + 
            "";
        }

        #endregion Methods
    }
}