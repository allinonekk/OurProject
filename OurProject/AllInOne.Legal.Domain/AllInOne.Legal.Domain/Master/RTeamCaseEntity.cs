namespace AllInOne.Legal.Domain.Master{
	using System;
	using System.Collections.Generic;

    using AllInOne.Legal.Domain.Interfaces;

	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public class RTeamCaseEntity : IMasterEntity
	{

		/// <summary>
		/// Gets or sets the CaseInfoID field.
		/// </summary>
        public System.Int64 CaseInfoID
		{
			get; 
 			set; 
		}

		/// <summary>
		/// Gets or sets the TeamListID field.
		/// </summary>
		public System.Int32 TeamListID
		{
			get; 
 			set; 
		}

		/// <summary>
		/// Gets or sets the UserID field.
		/// </summary>
        public System.String UserID
		{
			get; 
 			set; 
		}

		/// <summary>
		/// Gets or sets the obsInd field.
		/// </summary>
		public System.String obsInd
		{
			get; 
 			set; 
		}

		/// <summary>
		/// Gets or sets the LastModifiedBy field.
		/// </summary>
		public System.String LastModifiedBy
		{
			get; 
 			set; 
		}

		/// <summary>
		/// Gets or sets the LastModifiedDate field.
		/// </summary>
		public DateTime LastModifiedDate
		{
			get; 
 			set; 
		}
#region ToString, Equals And HashCode Overrides
		/// <summary>Determines whether the specified object is equal to this instance.</summary>
        /// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            RTeamCaseEntity toCompareWith = obj as RTeamCaseEntity;
			return toCompareWith == null ? false : ((this.CaseInfoID == toCompareWith.CaseInfoID && this.UserID == toCompareWith.UserID));
        }

        /// <summary>Returns a hash code for this instance.</summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        public override int GetHashCode()
        {
            int toReturn = base.GetHashCode();
            toReturn ^= this.CaseInfoID.GetHashCode();
            if (this.UserID != null)
                toReturn ^= this.UserID.GetHashCode();
            return toReturn;
        }
		
		public override string ToString()
        {
			return 		"CaseInfoID=" + CaseInfoID + "--" + 
		"TeamListID=" + TeamListID + "--" + 
		"UserID=" + UserID + "--" + 
		"obsInd=" + obsInd + "--" + 
		"LastModifiedBy=" + LastModifiedBy + "--" + 
		"LastModifiedDate=" + LastModifiedDate + "--" + 
		"";
        }
		
		#endregion

	}
}
