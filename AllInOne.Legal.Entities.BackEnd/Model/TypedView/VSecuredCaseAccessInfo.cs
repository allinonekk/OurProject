namespace AllInOne.Legal.Entities.BackEnd
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;

    using AllInOne.Legal.Entities.BackEnd;

    /// <summary>
    ///	Generated by MyGeneration using the NHibernate Object Mapping template
    /// </summary>
    public class VSecuredCaseAccessInfo : IBackEndSpecific
    {
        #region Fields

        private System.Int64 m_caseinfoid;
        private System.String m_userid;

        #endregion Fields

        #region Constructors

        public VSecuredCaseAccessInfo()
            : base()
        {
        }

        #endregion Constructors

        #region Properties

        public virtual System.Int64 CaseInfoId
        {
            get { return m_caseinfoid; }
            set
            {
                m_caseinfoid = value;
            }
        }

        public virtual System.String UserId
        {
            get { return m_userid; }
            set
            {
                if( value == null )
                    throw new ArgumentOutOfRangeException("Null value not allowed for UserId", value, "null");

                m_userid = value;
            }
        }

        #endregion Properties

        #region Methods

        /// <summary>Determines whether the specified object is equal to this instance.</summary>
        /// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            VSecuredCaseAccessInfo toCompareWith = obj as VSecuredCaseAccessInfo;
            return toCompareWith == null ? false : ((this.UserId == toCompareWith.UserId && this.CaseInfoId == toCompareWith.CaseInfoId));
        }

        /// <summary>Returns a hash code for this instance.</summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        public override int GetHashCode()
        {
            int toReturn = base.GetHashCode();
            toReturn ^= String.Concat(UserId, CaseInfoId).GetHashCode();
            return toReturn;
        }

        public override string ToString()
        {
            return 		"CaseInfoId=" + CaseInfoId + "--" +
            "UserId=" + UserId + "--" +
            "";
        }

        #endregion Methods
    }
}